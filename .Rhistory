html_text() %>%
str_extract(pattern = "z celkem [0-9]+") %>%
str_extract(pattern = "[0-9]+") %>%
as.numeric()
numberPages = ceiling(pages/20)
pb = progress_bar$new(
format = "  scraping addresses [:bar] :percent eta: :eta",
total = numberPages, clear = FALSE, width= 60)
decisions_id = foreach(i = seq(numberPages), .combine = "c") %do% {
html = remDr$getPageSource()[[1]]
output = read_html(html) %>%
html_elements(xpath = "//a[contains(@class, 'resultData')]") %>%
html_attr('href') %>%
paste0("https://nalus.usoud.cz/Search/", .)
remDr$findElements("xpath", "/html/body/form/div[4]/table/tbody/tr[4]/td/table/tbody/tr/td/a[last()]")[[1]]$clickElement()
pb$tick()
return(output)
}
return(decisions_id)
remDr$close()
rD[["server"]]$stop()
message("Done with scraping URL addresses.")
}
get_metadata = function(decision_addresses){
rD = rsDriver(browser="firefox", port=as.integer(sample(x = 3000:5000, 1)), verbose=F, chromever = NULL)
remDr = rD[["client"]]
message("Scraping metadata")
pb = progress_bar$new(
format = "scraping metadata [:bar] :percent eta: :eta",
total = length(decision_addresses), clear = FALSE, width= 60)
metadata = foreach(i = seq_along(decision_addresses), .combine = "bind_rows", .errorhandling = "remove") %do% {
remDr$navigate(decision_addresses[i] %>%
str_extract("id=[0-9]+") %>%
paste0("https://nalus.usoud.cz/Search/Karta.aspx?", .))
html = remDr$getPageSource()[[1]]
html_metadata = html %>%
read_html() %>%
html_nodes(".recordCardTable") %>%
html_table()
output = html_metadata[[1]]$X2 %>% t() %>% as_tibble()
colnames(output) = html_metadata[[1]]$X1
pb$tick()
return(output)
} %>%
subset(select = -c(2,4,5,10,24)) %>%
rename(
doc_id = "Identifikátor evropské judikatury",
case_id = "Spisová značka",
popular_name = "Populární název",
date_decision = "Datum rozhodnutí",
date_submission = "Datum podání",
date_publication = "Datum vyhlášení",
type_decision = "Forma rozhodnutí",
type_proceedings = "Typ řízení",
importance = "Význam",
applicant = "Navrhovatel",
concerned_body = "Dotčený orgán",
judge_rapporteur_name = "Soudce zpravodaj",
disputed_act = "Napadený akt",
type_verdict = "Typ výroku",
concerned_constitutional_acts = "Dotčené ústavní zákony a mezinárodní smlouvy",
concerned_acts = "Ostatní dotčené předpisy",
dissenting_opinion = "Odlišné stanovisko",
subject_proceedings = "Předmět řízení",
field_register = "Věcný rejstřík",
note = "Poznámka",
url_address = "URL adresa"
) %>%
mutate(across(contains("date"), ~ as.Date(x = ., format = "%d. %m. %Y"))) %>%
mutate(formation = case_when(
grepl(":Pl." , doc_id) ~ "Plenum",
grepl(":1.US.", doc_id) ~ "First Chamber",
grepl(":2.US.", doc_id) ~ "Second Chamber",
grepl(":3.US.", doc_id) ~ "Third Chamber",
grepl(":4.US.", doc_id) ~ "Fourth Chamber"
),
length_proceeding = interval(date_submission, date_decision) %>% as.numeric('days'),
outcome = ifelse(grepl("vyhověno", type_verdict), "granted", "rejected"),
judge_rapporteur_name = paste0(word(judge_rapporteur_name, 2), " ", word(judge_rapporteur_name, 1)),
doc_id = make.unique(doc_id)) %>%
remove_rownames() %>%
mutate(across(everything(), str_squish)) %>%
mutate(across(everything(), ~replace(., . == "NA", NA))) %>%
mutate(across(everything(), ~na_if(.,""))) %>%
left_join(., read_rds(file = "../data/US_judges.rds") %>% select(judge_name, judge_id), by = join_by(judge_rapporteur_name = judge_name)) %>%
rename(judge_rapporteur_id = judge_id) %>%
relocate(judge_rapporteur_id, .after = judge_rapporteur_name)
remDr$close()
rD[["server"]]$stop()
return(metadata)
message("Done with scraping metadata")
}
metadata_new = get_metadata(decision_addresses)
get_metadata = function(decision_addresses){
rD = rsDriver(browser="firefox", port=as.integer(sample(x = 3000:5000, 1)), verbose=F, chromever = NULL)
remDr = rD[["client"]]
message("Scraping metadata")
pb = progress_bar$new(
format = "scraping metadata [:bar] :percent eta: :eta",
total = length(decision_addresses), clear = FALSE, width= 60)
metadata = foreach(i = seq_along(decision_addresses), .combine = "bind_rows", .errorhandling = "remove") %do% {
remDr$navigate(decision_addresses[i] %>%
str_extract("id=[0-9]+") %>%
paste0("https://nalus.usoud.cz/Search/Karta.aspx?", .))
html = remDr$getPageSource()[[1]]
html_metadata = html %>%
read_html() %>%
html_nodes(".recordCardTable") %>%
html_table()
output = html_metadata[[1]]$X2 %>% t() %>% as_tibble()
colnames(output) = html_metadata[[1]]$X1
pb$tick()
return(output)
} %>%
subset(select = -c(2,4,5,10,24)) %>%
rename(
doc_id = "Identifikátor evropské judikatury",
case_id = "Spisová značka",
popular_name = "Populární název",
date_decision = "Datum rozhodnutí",
date_submission = "Datum podání",
date_publication = "Datum vyhlášení",
type_decision = "Forma rozhodnutí",
type_proceedings = "Typ řízení",
importance = "Význam",
applicant = "Navrhovatel",
concerned_body = "Dotčený orgán",
judge_rapporteur_name = "Soudce zpravodaj",
disputed_act = "Napadený akt",
type_verdict = "Typ výroku",
concerned_constitutional_acts = "Dotčené ústavní zákony a mezinárodní smlouvy",
concerned_acts = "Ostatní dotčené předpisy",
dissenting_opinion = "Odlišné stanovisko",
subject_proceedings = "Předmět řízení",
field_register = "Věcný rejstřík",
note = "Poznámka",
url_address = "URL adresa"
) %>%
mutate(across(contains("date"), ~ as.Date(x = ., format = "%d. %m. %Y"))) %>%
mutate(formation = case_when(
grepl(":Pl." , doc_id) ~ "Plenum",
grepl(":1.US.", doc_id) ~ "First Chamber",
grepl(":2.US.", doc_id) ~ "Second Chamber",
grepl(":3.US.", doc_id) ~ "Third Chamber",
grepl(":4.US.", doc_id) ~ "Fourth Chamber"
),
length_proceeding = interval(date_submission, date_decision) %>% as.numeric('days'),
outcome = ifelse(grepl("vyhověno", type_verdict), "granted", "rejected"),
judge_rapporteur_name = paste0(word(judge_rapporteur_name, 2), " ", word(judge_rapporteur_name, 1)),
doc_id = make.unique(doc_id)) %>%
remove_rownames() %>%
mutate(across(everything(), str_squish)) %>%
mutate(across(everything(), ~replace(., . == "NA", NA))) %>%
mutate(across(everything(), ~na_if(.,""))) %>%
left_join(., read_rds(file = "../data/US_judges.rds") %>% select(judge_name, judge_id), by = join_by(judge_rapporteur_name == judge_name)) %>%
rename(judge_rapporteur_id = judge_id) %>%
relocate(judge_rapporteur_id, .after = judge_rapporteur_name)
remDr$close()
rD[["server"]]$stop()
return(metadata)
message("Done with scraping metadata")
}
metadata_new = get_metadata(decision_addresses)
View(metadata_new)
metadata_new %>%
group_by(doc_id) %>%
count() %>%
filter(n > 1)
write_rds(metadata_new, file = "../data/US_metadata.rds")
texts_new = get_texts(metadata = metadata_new)
get_texts = function(metadata) {
texts = foreach(html = metadata$url_address, .combine = "bind_rows", .packages = c("rvest", "tidyverse")) %dopar% {
text = html %>%
read_html() %>%
html_element(xpath='//td[@class="DocContent"]/table/tr/td') %>%
html_text2() %>%
utf8::utf8_normalize(map_quote = TRUE)
output = tibble(
"url_address" = html,
"text" = text
)
return(output)
} %>% left_join(metadata %>%
select(doc_id, url_address), .) %>%
select(-url_address) %>%
distinct()
return(texts)
message("Finished scraping texts")
}
US_texts = bind_rows(texts, texts_new)
texts_new = get_texts(metadata = metadata_new)
write_rds(texts_new, file = "../data/US_texts.rds")
metadata_new %>%
group_by(doc_id) %>%
count() %>%
filter(n > 1)
texts_new %>%
group_by(doc_id) %>%
count() %>%
filter(n > 1)
library(tidyverse)
library(foreach)
library(parallel)
# Parallelise
library(doMC)
registerDoMC(cores = parallel::detectCores() - 2)
foreach::getDoParRegistered()
foreach::getDoParWorkers()
# Load data
US_metadata = readr::read_rds("../data/US_metadata.rds")
US_texts = readr::read_rds("../data/US_texts.rds")
US_judges = readr::read_rds("../data/US_judges.rds")
source("supporting_functions.R")
# The mean function
get_compositions = function(texts, judges_grepl, judges_names, judges_id) {
data_compositions = foreach(i = seq_along(texts$doc_id), .combine = "rbind") %:%
foreach(j = seq_along(judges_grepl), .combine = "rbind", .packages = c("tidyverse")) %dopar% {
if (grepl(judges_grepl[j], texts[i,"text"], ignore.case = TRUE)) {
output = tibble("doc_id" = texts$doc_id[i],
"judge" = judges_names[j],
"judge_id" = judges_id[j])
return(output)
}
}
return(data_compositions)
}
#Functions call
US_compositions = get_compositions(texts = US_texts, judges_grepl = US_judges$name_lemmatized, judges_names = US_judges$judge_name, judges_id = US_judges$judge_id)
# Save data
write_rds(US_compositions, file = "../data/US_compositions.rds")
library(tidyverse)
library(progress)
library(foreach)
# Parallelise
library(doMC)
registerDoMC(cores = parallel::detectCores() - 2)
foreach::getDoParRegistered()
foreach::getDoParWorkers()
# Load data
source("../supporting_functions.R")
US_texts = readr::read_rds("../data/US_texts.rds")
US_metadata = readr::read_rds("../data/US_metadata.rds")
US_judges = readr::read_rds("../data/US_judges.rds")
# Create function for extracting dissents, returns the long format
get_dissents = function(data, judges_names, judges_id) {
judges_switched = map(.x = judges_names, ~ paste0(word(.x, 2), " ", word(.x, 1)))
data_dissents = foreach(i = seq(data$doc_id), .combine = "bind_rows") %:%
foreach(j = seq(judges_switched), .combine = "bind_rows", .packages = c("tidyverse")) %dopar% {
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output = tibble("doc_id" = data$doc_id[i],
"dissenting_judge" = judges_names[j],
"judge_id" = judges_id[j])
return(output)
}
}
parallel::stopCluster(cl = my.cluster)
return(data_dissents)
}
# Run the function and save the data
US_dissents = get_dissents(US_metadata, judges_names = US_judges$judge_name, judges_id = US_judges$judge_id)
# Create function for extracting dissents, returns the long format
get_dissents = function(data, judges_names, judges_id) {
judges_switched = map(.x = judges_names, ~ paste0(word(.x, 2), " ", word(.x, 1)))
data_dissents = foreach(i = seq(data$doc_id), .combine = "bind_rows") %:%
foreach(j = seq(judges_switched), .combine = "bind_rows", .packages = c("tidyverse")) %dopar% {
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output = tibble("doc_id" = data$doc_id[i],
"dissenting_judge" = judges_names[j],
"judge_id" = judges_id[j])
return(output)
}
}
return(data_dissents)
}
# Run the function and save the data
US_dissents = get_dissents(US_metadata, judges_names = US_judges$judge_name, judges_id = US_judges$judge_id)
# Save data
readr::write_rds(US_dissents, file = "../data/US_dissents.rds")
# Load packages and data
library(tidyverse)
library(foreach)
# Parallelise
library(doMC)
registerDoMC(cores = parallel::detectCores() - 2)
foreach::getDoParRegistered()
foreach::getDoParWorkers()
# Load data
US_metadata = readRDS("../data/US_metadata.rds")
US_texts = readRDS("../data/US_texts.rds")
texts = US_texts$text
doc_id = US_texts$doc_id
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
if (is.null(matches)) {
return(NULL)
} else {
citation = foreach(j = seq(matches), .combine = "bind_rows") {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
if (is.null(matches)) {
return(NULL)
} else {
citation = foreach(j = seq(matches), .combine = "bind_rows") {
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %do% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
library(parallel)
library(doParallel)
# Load packages and data
library(tidyverse)
library(foreach)
library(parallel)
library(doParallel)
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %do% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
# Run the function (on the CC)
US_citations = find_citations(texts = US_texts$text, doc_id = US_texts$doc_id)
NSS_citations = find_citations(texts = NSS_texts$text, doc_id = NSS_texts$doc_id)
# Save data
saveRDS(US_citations, "../data/US_citations.rds")
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq(matches), .combine = "bind_rows") {
?seq_along
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") {
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") {
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
# citation = foreach(j = seq_along(matches), .combine = "bind_rows") {
#       tibble(
#         "doc_id" = doc_id[i],
#         "matched_case_id" = matches[j])}
}
return(US_citations)
}
source("~/Library/CloudStorage/OneDrive-Humboldt-UniversitaetzuBerlin,CMS/Programming/apex_courts_dataset/US_reference_recognition.R", echo=TRUE)
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") {
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") %do% {
tibble(
"doc_id" = doc_id[i],
"matched_case_id" = matches[j])}
return(citation)
}
return(US_citations)
}
# Run the function (on the CC)
US_citations = find_citations(texts = US_texts$text, doc_id = US_texts$doc_id)
View(US_citations)
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") %do% {
if(is.null(matches)){
return(NULL)
} else {tibble(
"doc_id" = doc_id[i],
"matched_case_id" = matches[j])}
}
return(citation)
}
return(US_citations)
}
# Run the function (on the CC)
US_citations = find_citations(texts = US_texts$text, doc_id = US_texts$doc_id)
remove(US_citations)
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %dopar% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") %do% {
if(is.null(matches)){
return(NULL)
} else {
output = tibble(
"doc_id" = doc_id[i],
"matched_case_id" = matches[j])
return(output)
}
}
return(citation)
}
return(US_citations)
}
# Run the function (on the CC)
US_citations = find_citations(texts = US_texts$text, doc_id = US_texts$doc_id)
View(US_citations)
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %:% {
matches = str_extract_all(string = texts[i], pattern = citation)
citation = foreach(j = seq_along(matches), .combine = "bind_rows") %do% {
if(is.null(matches)){
return(NULL)
} else {
output = tibble(
"doc_id" = doc_id[i],
"matched_case_id" = matches[j])
return(output)
}
}
return(citation)
}
return(US_citations)
}
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %:% {
matches = str_extract_all(string = texts[i], pattern = citation)
if(is.null(matches)){
return(NULL)
} else {
citation = foreach(j = seq_along(matches), .combine = "bind_rows") %do% {
output = tibble(
"doc_id" = doc_id[i],
"matched_case_id" = matches[j])
return(output)
}
return(citation)
}
}
return(US_citations)
}
# Run the function (on the CC)
US_citations = find_citations(texts = US_texts$text, doc_id = US_texts$doc_id)
# The function that finds all references to US caselaw by the case ID (not popular name) and saves it in a matcheable format with the metadata file
find_citations = function(texts, doc_id) {
citation = 'sp\\.\\s*zn\\.\\s*[A-Za-z]{1,2}\\.\\s*ÚS\\s*\\d{1,4}\\/\\d{1,4}'
US_citations = foreach(i = seq_along(texts), .combine = "bind_rows") %do% {
matches = str_extract_all(string = texts[i], pattern = citation)
if(is.null(matches)){
return(NULL)
} else {
citation = foreach(j = seq_along(matches), .combine = "bind_rows") %do% {
output = tibble(
"doc_id" = doc_id[i],
"matched_case_id" = matches[j])
return(output)
}
return(citation)
}
}
return(US_citations)
}
# Run the function (on the CC)
US_citations = find_citations(texts = US_texts$text, doc_id = US_texts$doc_id)
View(US_citations)
