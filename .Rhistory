get_compositions <- function(texts, judges_grepl, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  creating chamber compositions [:bar] :percent eta: :eta",
total = length(texts$doc_id)*length(judges_grepl), clear = FALSE, width= 60)
data_compositions <- foreach(i = seq(texts$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_grepl), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_grepl[j], texts[i,2], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(texts$doc_id[i]),
"judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_compositions)
}
data_compositions <- get_compositions(texts = data_texts, judges_grepl = data_judges$name_lemmatized, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
# Create function for extracting dissents, returns the long format
get_dissents <- function(data, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  extracting dissents [:bar] :percent eta: :eta",
total = length(data$doc_id)*length(judges), clear = FALSE, width= 60)
judges_switched <- switch_names(judges = judges_names)
data_dissents <- foreach(i = seq(data$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_switched), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(data$doc_id[i]),
"dissenting_judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_dissents)
}
# Run the function and save the data
data_dissents <- get_dissents(data_metadata, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
View(data_compositions)
save(data_compositions, file = "US_compositions.RData")
load("data/US_metadata.RData")
# Create function for extracting dissents, returns the long format
get_dissents <- function(data, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  extracting dissents [:bar] :percent eta: :eta",
total = length(data$doc_id)*length(judges), clear = FALSE, width= 60)
judges_switched <- switch_names(judges = judges_names)
data_dissents <- foreach(i = seq(data$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_switched), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(data$doc_id[i]),
"dissenting_judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_dissents)
}
# Create function for extracting dissents, returns the long format
get_dissents <- function(data, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  extracting dissents [:bar] :percent eta: :eta",
total = length(data$doc_id)*length(judges), clear = FALSE, width= 60)
judges_switched <- switch_names(judges = judges_names)
data_dissents <- foreach(i = seq(data$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_switched), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(data$doc_id[i]),
"dissenting_judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_dissents)
}
# Run the function and save the data
data_dissents <- get_dissents(data_metadata, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
# Create function for extracting dissents, returns the long format
get_dissents <- function(data, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  extracting dissents [:bar] :percent eta: :eta",
total = length(data$doc_id)*length(judges_names), clear = FALSE, width= 60)
judges_switched <- switch_names(judges = judges_names)
data_dissents <- foreach(i = seq(data$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_switched), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(data$doc_id[i]),
"dissenting_judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_dissents)
}
# Run the function and save the data
data_dissents <- get_dissents(data_metadata, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
source("supporting_functions.R")
# Create function for extracting dissents, returns the long format
get_dissents <- function(data, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  extracting dissents [:bar] :percent eta: :eta",
total = length(data$doc_id)*length(judges_names), clear = FALSE, width= 60)
judges_switched <- switch_names(judges = judges_names)
data_dissents <- foreach(i = seq(data$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_switched), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_switched[j], data[i,"dissenting_opinion"], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(data$doc_id[i]),
"dissenting_judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_dissents)
}
# Run the function and save the data
data_dissents <- get_dissents(data_metadata, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
View(data_dissents)
save(data_dissents, file = "data/US_dissents.RData")
View(data_metadata)
data <- data_metadata %>% select(doc_id, type_verdict) %>% filter(!grepl(.$type_verdict,"procesní")) %>% left_join(., data_compositions)
?grepl
data <- data_metadata %>% select(doc_id, type_verdict) %>% filter(!grepl(pattern = "procesní", x = .$type_verdict)) %>% left_join(data_compositions, .)
data_metadata$doc_id <- data_metadata$doc_id %>% unlist() %>% as.character()
remove_procedural <- function(data, data_metadata){
data <- data_metadata %>% select(doc_id, type_verdict) %>% filter(!grepl(pattern = "procesní", x = .$type_verdict)) %>% left_join(data_compositions, .)
}
# Save data
save(data_metadata, file = "data/US_metadata.RData")
data <- data_metadata %>% select(doc_id, type_verdict) %>% filter(!grepl(pattern = "procesní", x = .$type_verdict)) %>% left_join(data_compositions, .)
data_compositions$doc_id <- data_compositions$doc_id %>% unlist() %>% as.character()
data <- data_metadata %>% select(doc_id, type_verdict) %>% filter(!grepl(pattern = "procesní", x = .$type_verdict)) %>% left_join(data_compositions, .)
View(data)
save(data_compositions, file = "US_compositions.RData")
# Data check
data_compositions_check <- data%>% group_by(doc_id) %>% summarise(count = n())
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
View(data)
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = nrows())
View(data)
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
xfun::pkg_attach2("tidyverse", "campfin", "foreach", "doParallel", "ggplot2", "progress", "RMySQL", "rapportools", "foreach")
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
View(data)
View(data_compositions)
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n_distinct())
View(data_compositions_check)
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(n = n())
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n(.))
View(data)
View(data_compositions)
View(data_compositions_check)
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n(.$judge))
# Data check
data_compositions_check <- data %>% group_by(doc_id) %>% summarise(count = n())
# Data check
data_compositions_check <- data_compositions %>% group_by(doc_id) %>% summarise(count = n())
View(data_compositions)
data_compositions_check <- data_compositions %>% group_by(doc_id)
View(data_compositions)
data_compositions_check <- data_compositions %>% group_by(doc_id) %>% summarise(count = n())
rlang::last_error()
# Data check
data_compositions_check <- data_compositions %>% group_by(doc_id) %>% summarise(count = count())
View(data)
View(data)
data_compositions_check <- data_compositions %>% select(!type_verdict) %>% group_by(doc_id)
data_compositions_check <- data %>% select(!type_verdict) %>% group_by(doc_id)
View(data_compositions_check)
# Load data
load("data/US_compositions.RData")
setwd("~/Library/CloudStorage/OneDrive-Humboldt-UniversitaetzuBerlin,CMS/Programming/apex_courts_dataset")
xfun::pkg_attach2("tidyverse", "campfin", "foreach", "doParallel", "ggplot2", "progress", "RMySQL", "rapportools", "foreach")
# Load data
load("data/US_compositions.RData")
load("data/US_judges.RData")
# Load data
load("data/US_compositions.RData")
load("data/US_metadata.RData")
# Load data
load("data/US_compositions.RData")
load("data/US_texts.RData")
# The mean function
get_compositions <- function(texts, judges_grepl, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  creating chamber compositions [:bar] :percent eta: :eta",
total = length(texts$doc_id)*length(judges_grepl), clear = FALSE, width= 60)
data_compositions <- foreach(i = seq(texts$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_grepl), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_grepl[j], texts[i,2], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(texts$doc_id[i]),
"judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_compositions)
}
data_compositions <- get_compositions(texts = data_texts, judges_grepl = data_judges$name_lemmatized, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
save(data_compositions, file = "data/US_compositions.RData")
load("data/US_texts_paragraphs.RData")
sample <- data_metadata %>%
filter(is.empty(dissenting_opinion)) %>%
slice_sample(n = 50)
sample_paragraphs <- data_metadata %>%
filter(!is.empty(dissenting_opinion)) %>%
slice_sample(n = 50) %>%
rbind(., sample) %>%
select(doc_id) %>%
left_join(sample, ., by = "doc_id")
sample <- data_metadata %>%
filter(is.empty(dissenting_opinion)) %>%
slice_sample(n = 50)
sample_paragraphs <- data_metadata %>%
filter(!is.empty(dissenting_opinion)) %>%
slice_sample(n = 50) %>%
rbind(., sample)
sample_paragraphs <- data_metadata %>%
filter(!is.empty(dissenting_opinion)) %>%
slice_sample(n = 50) %>%
rbind(., sample) %>%
select(doc_id)
View(sample_paragraphs)
sample <- data_metadata %>%
filter(is.empty(dissenting_opinion)) %>%
slice_sample(n = 50)
sample_paragraphs <- data_metadata %>%
filter(!is.empty(dissenting_opinion)) %>%
slice_sample(n = 50) %>%
rbind(., sample) %>%
select(doc_id)
sample <- data_metadata %>%
filter(is.empty(dissenting_opinion)) %>%
slice_sample(n = 50)
sample_paragraphs <- data_metadata %>%
filter(!is.empty(dissenting_opinion)) %>%
slice_sample(n = 50) %>%
rbind(., sample) %>%
select(doc_id) %>%
left_join(., data_texts)
View(sample_paragraphs)
sample_paragraphs$text[1]
View(sample_paragraphs)
write_csv(sample_paragraphs, file = "data/US_sample_annotate")
write_csv(sample_paragraphs, file = "data/US_sample_annotate.csv")
judgments_annotated <- jsonlite::fromJSON(txt = "data/US_judgments_annotated.json")
View(judgments_annotated)
#Load data
load("data/US_texts.RData")
load("data/US_metadata.RData")
load("data/US_texts_paragraphs.RData")
View(judgments_annotated)
judgments_annotations <- judgments_annotated$examples %>% as.data.frame()
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite")
judgments_annotations <- judgments_annotated$examples %>% as.data.frame()
View(judgments_annotations)
View(judgments_annotations[[6]][[1]])
View(judgments_annotations[[6]][[1]])
judgments_annotations[[6]][[1]]
judgments_annotations[[7]][[1]]
judgments_annotations[[6]][[2]]
View(judgments_annotations[[6]][[2]])
View(judgments_annotations[[6]])
length(judgments_annotations[[6]])
View(judgments_annotations[[6]][[2]])
judgments_annotations[[6]][[2]][1]
judgments_annotations[[6]][[2]][,1]
judgments_annotations[[6]][[2]][1,]
judgments_annotations[[6]][[2]][1,1]
judgments_annotations[[6]][[2]][1,2]
judgments_annotations$metadata
judgments_annotations$metadata[1]
judgments_annotations$metadata$doc_id[1]
judgments_annotations$annotations
judgments_annotations$annotations$start[1]
judgments_annotations$annotations[[1]]
df <- foreach(i = seq(judgments_annotations[[6]])) %:%
foreach (j = seq(judgments_annotations[[6]][[i]])) %do% {
output <- list(
"doc_id" = judgments_annotations$metadata$doc_id[1],
"value" = judgments_annotations[[6]][[i]][j,4],
"tag" = judgments_annotations[[6]][[i]][j,2],
"start" = judgments_annotations[[6]][[i]][j,3],
"end" = judgments_annotations[[6]][[i]][j,1]
)
return(output)
} %>% as.data.frame(row.names = FALSE)
df <- foreach(i = seq(judgments_annotations[[6]])) %:%
foreach (j = seq(judgments_annotations[[6]][[i]])) %do% {
output <- list(
"doc_id" = judgments_annotations$metadata$doc_id[i],
"value" = judgments_annotations[[6]][[i]][j,4],
"tag" = judgments_annotations[[6]][[i]][j,2],
"start" = judgments_annotations[[6]][[i]][j,3],
"end" = judgments_annotations[[6]][[i]][j,1]
)
return(output)
} %>% as.data.frame(row.names = FALSE)
length(judgments_annotations[[6]])
judgments_annotations[[6]][[1]]
judgments_annotations[[6]][[1]][1,1]
judgments_annotations[[6]][[1]][1,2]
View(judgments_annotations)
View(judgments_annotations[[6]][[93]])
View(judgments_annotations[[6]][[95]])
judgments_annotations[[6]] <- judgments_annotations[[6]] %>% drop_na()
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite", "rapport")
judgments_annotations[[6]] <- judgments_annotations[[6]] %>% filter(is.empty())
judgments_annotations[[6]] <- judgments_annotations[[6]] %>% purrr::discard(rlang::is_na) %>% purrr::map(remove_empty)
judgments_annotations[[6]] <- judgments_annotations[[6]] %>% purrr::discard(rlang::is_na) %>% purrr::map(remove_empty)
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite", "rapport", "purr", "janitor")
source("~/Library/CloudStorage/OneDrive-Humboldt-UniversitaetzuBerlin,CMS/Programming/apex_courts_dataset/judgment_partitioning.R", echo=TRUE)
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite", "rapport")
judgments_annotations[[6]] <- judgments_annotations[[6]] %>% filter(is.empty())
judgments_annotations[[6]] <- judgments_annotations[[6]][is.empty() == TRUE]
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite", "rapport")
judgments_annotations[[6]] <- judgments_annotations[[6]][is.empty() == TRUE]
judgments_annotations[[6]] <- judgments_annotations[[6]][is_empty() == TRUE]
judgments_annotations[[6]] <- judgments_annotations[[6]][is_empty(judgments_annotations[[6]]) == TRUE]
judgments_annotations[[6]] <- judgments_annotations[[6]][is.empty(judgments_annotations[[6]]) == TRUE]
is.empty(judgments_annotations[[6]])
is_empty(judgments_annotations[[6]])
is_empty(judgments_annotations[[6]][[1]])
is_empty(judgments_annotations[[6]][[2]])
is_empty(judgments_annotations[[6]][[3]])
View(judgments_annotated)
View(judgments_annotations)
is_empty(judgments_annotations[[6]][[7]])
View(judgments_annotations)
is_empty(judgments_annotations[[6]][!apply(is_empty(judgments_annotations[[6]] == "", 1, all),]
judgments_annotations[[6]][!apply(is_empty(judgments_annotations[[6]] == "", 1, all),]
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite", "rapport")
#Load data
load("data/US_texts.RData")
load("data/US_metadata.RData")
judgments_annotated <- jsonlite::fromJSON(txt = "data/US_judgments_annotated.json")
judgments_annotations <- judgments_annotated$examples %>% as.data.frame()
df <- foreach(i = seq(judgments_annotations[[6]])) %:%
foreach (j = seq(judgments_annotations[[6]][[i]])) %do% {
output <- list(
"doc_id" = judgments_annotations$metadata$doc_id[i],
"value" = judgments_annotations[[6]][[i]][j,4],
"tag" = judgments_annotations[[6]][[i]][j,2],
"start" = judgments_annotations[[6]][[i]][j,3],
"end" = judgments_annotations[[6]][[i]][j,1]
)
return(output)
} %>% as.data.frame(row.names = FALSE)
View(df)
df <- foreach(i = seq(judgments_annotations[[6]]), .combine = "rbind") %:%
foreach (j = seq(judgments_annotations[[6]][[i]]), .combine = "rbind") %do% {
output <- list(
"doc_id" = judgments_annotations$metadata$doc_id[i],
"value" = judgments_annotations[[6]][[i]][j,4],
"tag" = judgments_annotations[[6]][[i]][j,2],
"start" = judgments_annotations[[6]][[i]][j,3],
"end" = judgments_annotations[[6]][[i]][j,1]
)
return(output)
} %>% as.data.frame(row.names = FALSE)
View(df)
load("data/US_texts.RData")
load("data/US_metadata.RData")
load("data/US_texts_paragraphs.RData")
load("data/US_dissents.RData")
View(data_metadata)
View(data_texts)
load("data/US_judges.RData")
View(data_judges)
View(data_dissents)
# Load data
load("data/US_compositions.RData")
View(data_compositions)
data_metadata %>% filter(grepl(pattern = "neodstraněné vady", x = .$type_verdict))
xfun::pkg_attach2("tidyverse", "tidytext", "ggplot2", "progress", "tm", "foreach", "jsonlite", "rapport")
data_metadata %>% filter(grepl(pattern = "neodstraněné vady", x = .$type_verdict))
vady <- data_metadata %>% filter(grepl(pattern = "neodstraněné vady", x = .$type_verdict))
View(vady)
#Save and load data
# save(data_judges, file = "data/US_judges.RData")
load(file = "data/US_judges.RData")
data_judges$name_lemmatized <- c("Pav[a-ž]*\s*Rychetsk[a-ž]*", "Milad[a-ž]*\s*Tomkov[a-ž]*", "Jaroslav[a-ž]*\s*Fenyk[a-ž]*", "Jan[a-ž]*\s* Filip[a-ž]*", "Vladimír[a-ž]*\s*Sládeč[a-ž]*", "Ludvík[a-ž]*\s*David[a-ž]*", "Radovan[a-ž]*\s*Suchán[a-ž]*", "Jiří[a-ž]*\s*Zemán[a-ž]*", "Vojtěch[a-ž]*\s*Šimíč[a-ž]*", "Tomáš[a-ž]*\s*Lichovník[a-ž]*", "David[a-ž]*\s*Uhlíř[a-ž]*", "Jaromír[a-ž]*\s*Jirs[a-ž]*", "Josef[a-ž]*\s*Fial[a-ž]*", "Pav[a-ž]*\s*Šámal[a-ž]*", "Kateřin[a-ž]*\s*Šimáčkov[a-ž]*", "Jan[a-ž]*\s*Musil[a-ž]*", "Vladimír[a-ž]*\s*Kůrk[a-ž]*", "Vlast[a-ž]*\s*Formánkov[a-ž]*", "Ivan[a-ž]*\s*Janů", "Michael[a-ž]*\s*Židlick[a-ž]*", "Stanislav[a-ž]*\s*Balík[a-ž]*", "Jiří[a-ž]*\s*Nykodým[a-ž]*", "Dagmar Lastoveck[a-ž]*", "Pav[a-ž]*\s*Holländer[a-ž]*", "Vojen[a-ž]*\s*G(ü|ű|u|ú)t(|t)ler[a-ž]*", "Miloslav[a-ž]*\s*Výborn[a-ž]*", "Jiří[a-ž]*\s*Much[a-ž]*", "Františ[a-ž]*\s*Ducho[a-ž]*", "Elišk[a-ž]*\s*W(a|á)gner[a-ž]*", "Jiří[a-ž]*\s*Malenovsk[a-ž]*", "Pav[a-ž]*\s*Varvařovsk[a-ž]*", "Ev[a-ž]*\s*Zarembov[a-ž]*", "Vlastimil[a-ž]*\s*Ševčík[a-ž]*", "Antonín[a-ž]*\s*Procházk[a-ž]*", "Vladimír[a-ž]*\s*Paul[a-ž]*", "Vladimír[a-ž]*\s*Klokočk[a-ž]*", "Zde[a-ž]*\s*Kessler[a-ž]*", "Vladimír[a-ž]*\s*Jur[a-ž]*", "Miloš[a-ž]*\s*Holeč[a-ž]*", "Vladimír[a-ž]*\s*Čermák[a-ž]*", "Vojtěch[a-ž]*\s*Cepl[a-ž]*", "Iv[a-ž]*\s*Brožov[a-ž]*", "Jan[a-ž]*\s*Svatoň[a-ž]*") %>% as.character()
data_judges$name_lemmatized <- c("Pav[a-ž]*\\s*Rychetsk[a-ž]*", "Milad[a-ž]*\s*Tomkov[a-ž]*", "Jaroslav[a-ž]*\s*Fenyk[a-ž]*", "Jan[a-ž]*\s* Filip[a-ž]*", "Vladimír[a-ž]*\s*Sládeč[a-ž]*", "Ludvík[a-ž]*\s*David[a-ž]*", "Radovan[a-ž]*\s*Suchán[a-ž]*", "Jiří[a-ž]*\s*Zemán[a-ž]*", "Vojtěch[a-ž]*\s*Šimíč[a-ž]*", "Tomáš[a-ž]*\s*Lichovník[a-ž]*", "David[a-ž]*\s*Uhlíř[a-ž]*", "Jaromír[a-ž]*\s*Jirs[a-ž]*", "Josef[a-ž]*\s*Fial[a-ž]*", "Pav[a-ž]*\s*Šámal[a-ž]*", "Kateřin[a-ž]*\s*Šimáčkov[a-ž]*", "Jan[a-ž]*\s*Musil[a-ž]*", "Vladimír[a-ž]*\s*Kůrk[a-ž]*", "Vlast[a-ž]*\s*Formánkov[a-ž]*", "Ivan[a-ž]*\s*Janů", "Michael[a-ž]*\s*Židlick[a-ž]*", "Stanislav[a-ž]*\s*Balík[a-ž]*", "Jiří[a-ž]*\s*Nykodým[a-ž]*", "Dagmar Lastoveck[a-ž]*", "Pav[a-ž]*\s*Holländer[a-ž]*", "Vojen[a-ž]*\s*G(ü|ű|u|ú)t(|t)ler[a-ž]*", "Miloslav[a-ž]*\s*Výborn[a-ž]*", "Jiří[a-ž]*\s*Much[a-ž]*", "Františ[a-ž]*\s*Ducho[a-ž]*", "Elišk[a-ž]*\s*W(a|á)gner[a-ž]*", "Jiří[a-ž]*\s*Malenovsk[a-ž]*", "Pav[a-ž]*\s*Varvařovsk[a-ž]*", "Ev[a-ž]*\s*Zarembov[a-ž]*", "Vlastimil[a-ž]*\s*Ševčík[a-ž]*", "Antonín[a-ž]*\s*Procházk[a-ž]*", "Vladimír[a-ž]*\s*Paul[a-ž]*", "Vladimír[a-ž]*\s*Klokočk[a-ž]*", "Zde[a-ž]*\s*Kessler[a-ž]*", "Vladimír[a-ž]*\s*Jur[a-ž]*", "Miloš[a-ž]*\s*Holeč[a-ž]*", "Vladimír[a-ž]*\s*Čermák[a-ž]*", "Vojtěch[a-ž]*\s*Cepl[a-ž]*", "Iv[a-ž]*\s*Brožov[a-ž]*", "Jan[a-ž]*\s*Svatoň[a-ž]*") %>% as.character()
data_judges$name_lemmatized <- c("Pav[a-ž]*\\s*Rychetsk[a-ž]*", "Milad[a-ž]*\\s*Tomkov[a-ž]*", "Jaroslav[a-ž]*\\s*Fenyk[a-ž]*", "Jan[a-ž]*\\s* Filip[a-ž]*", "Vladimír[a-ž]*\\s*Sládeč[a-ž]*", "Ludvík[a-ž]*\\s*David[a-ž]*", "Radovan[a-ž]*\\s*Suchán[a-ž]*", "Jiří[a-ž]*\\s*Zemán[a-ž]*", "Vojtěch[a-ž]*\\s*Šimíč[a-ž]*", "Tomáš[a-ž]*\\s*Lichovník[a-ž]*", "David[a-ž]*\\s*Uhlíř[a-ž]*", "Jaromír[a-ž]*\\s*Jirs[a-ž]*", "Josef[a-ž]*\\s*Fial[a-ž]*", "Pav[a-ž]*\\s*Šámal[a-ž]*", "Kateřin[a-ž]*\\s*Šimáčkov[a-ž]*", "Jan[a-ž]*\\s*Musil[a-ž]*", "Vladimír[a-ž]*\\s*Kůrk[a-ž]*", "Vlast[a-ž]*\\s*Formánkov[a-ž]*", "Ivan[a-ž]*\\s*Janů", "Michael[a-ž]*\\s*Židlick[a-ž]*", "Stanislav[a-ž]*\\s*Balík[a-ž]*", "Jiří[a-ž]*\\s*Nykodým[a-ž]*", "Dagmar Lastoveck[a-ž]*", "Pav[a-ž]*\\s*Holländer[a-ž]*", "Vojen[a-ž]*\\s*G(ü|ű|u|ú)t(|t)ler[a-ž]*", "Miloslav[a-ž]*\\s*Výborn[a-ž]*", "Jiří[a-ž]*\\s*Much[a-ž]*", "Františ[a-ž]*\\s*Ducho[a-ž]*", "Elišk[a-ž]*\\s*W(a|á)gner[a-ž]*", "Jiří[a-ž]*\\s*Malenovsk[a-ž]*", "Pav[a-ž]*\\s*Varvařovsk[a-ž]*", "Ev[a-ž]*\\s*Zarembov[a-ž]*", "Vlastimil[a-ž]*\\s*Ševčík[a-ž]*", "Antonín[a-ž]*\\s*Procházk[a-ž]*", "Vladimír[a-ž]*\\s*Paul[a-ž]*", "Vladimír[a-ž]*\\s*Klokočk[a-ž]*", "Zde[a-ž]*\\s*Kessler[a-ž]*", "Vladimír[a-ž]*\\s*Jur[a-ž]*", "Miloš[a-ž]*\\s*Holeč[a-ž]*", "Vladimír[a-ž]*\\s*Čermák[a-ž]*", "Vojtěch[a-ž]*\\s*Cepl[a-ž]*", "Iv[a-ž]*\\s*Brožov[a-ž]*", "Jan[a-ž]*\\s*Svatoň[a-ž]*") %>% as.character()
xfun::pkg_attach2("tidyverse", "lubridate")
data_judges$name_lemmatized <- c("Pav[a-ž]*\\s*Rychetsk[a-ž]*", "Milad[a-ž]*\\s*Tomkov[a-ž]*", "Jaroslav[a-ž]*\\s*Fenyk[a-ž]*", "Jan[a-ž]*\\s* Filip[a-ž]*", "Vladimír[a-ž]*\\s*Sládeč[a-ž]*", "Ludvík[a-ž]*\\s*David[a-ž]*", "Radovan[a-ž]*\\s*Suchán[a-ž]*", "Jiří[a-ž]*\\s*Zemán[a-ž]*", "Vojtěch[a-ž]*\\s*Šimíč[a-ž]*", "Tomáš[a-ž]*\\s*Lichovník[a-ž]*", "David[a-ž]*\\s*Uhlíř[a-ž]*", "Jaromír[a-ž]*\\s*Jirs[a-ž]*", "Josef[a-ž]*\\s*Fial[a-ž]*", "Pav[a-ž]*\\s*Šámal[a-ž]*", "Kateřin[a-ž]*\\s*Šimáčkov[a-ž]*", "Jan[a-ž]*\\s*Musil[a-ž]*", "Vladimír[a-ž]*\\s*Kůrk[a-ž]*", "Vlast[a-ž]*\\s*Formánkov[a-ž]*", "Ivan[a-ž]*\\s*Janů", "Michael[a-ž]*\\s*Židlick[a-ž]*", "Stanislav[a-ž]*\\s*Balík[a-ž]*", "Jiří[a-ž]*\\s*Nykodým[a-ž]*", "Dagmar Lastoveck[a-ž]*", "Pav[a-ž]*\\s*Holländer[a-ž]*", "Vojen[a-ž]*\\s*G(ü|ű|u|ú)t(|t)ler[a-ž]*", "Miloslav[a-ž]*\\s*Výborn[a-ž]*", "Jiří[a-ž]*\\s*Much[a-ž]*", "Františ[a-ž]*\\s*Ducho[a-ž]*", "Elišk[a-ž]*\\s*W(a|á)gner[a-ž]*", "Jiří[a-ž]*\\s*Malenovsk[a-ž]*", "Pav[a-ž]*\\s*Varvařovsk[a-ž]*", "Ev[a-ž]*\\s*Zarembov[a-ž]*", "Vlastimil[a-ž]*\\s*Ševčík[a-ž]*", "Antonín[a-ž]*\\s*Procházk[a-ž]*", "Vladimír[a-ž]*\\s*Paul[a-ž]*", "Vladimír[a-ž]*\\s*Klokočk[a-ž]*", "Zde[a-ž]*\\s*Kessler[a-ž]*", "Vladimír[a-ž]*\\s*Jur[a-ž]*", "Miloš[a-ž]*\\s*Holeč[a-ž]*", "Vladimír[a-ž]*\\s*Čermák[a-ž]*", "Vojtěch[a-ž]*\\s*Cepl[a-ž]*", "Iv[a-ž]*\\s*Brožov[a-ž]*", "Jan[a-ž]*\\s*Svatoň[a-ž]*") %>% as.character()
View(data_judges)
#Save and load data
save(data_judges, file = "data/US_judges.RData")
load("data/US_texts.RData")
load("data/US_metadata.RData")
# The mean function
get_compositions <- function(texts, judges_grepl, judges_names, judges_id) {
pb <- progress_bar$new(
format = "  creating chamber compositions [:bar] :percent eta: :eta",
total = length(texts$doc_id)*length(judges_grepl), clear = FALSE, width= 60)
data_compositions <- foreach(i = seq(texts$doc_id), .combine = "rbind") %:%
foreach(j = seq(judges_grepl), .combine = "rbind") %do% {
pb$tick()
if (grepl(judges_grepl[j], texts[i,2], ignore.case = TRUE)) {
output <- list("doc_id" = as.character(texts$doc_id[i]),
"judge" = as.character(judges_names[j]),
"judge_id" = as.character(judges_id[j]))
return(output)
}
} %>% as.data.frame(row.names = FALSE)
return(data_compositions)
}
xfun::pkg_attach2("tidyverse", "campfin", "foreach", "doParallel", "ggplot2", "progress", "RMySQL", "rapportools", "foreach")
data_compositions <- get_compositions(texts = data_texts, judges_grepl = data_judges$name_lemmatized, judges_names = data_judges$judge_name, judges_id = data_judges$judge_id)
View(data_compositions)
save(data_compositions, file = "data/US_compositions.RData")
# Data check
data_compositions_check <- data_compositions %>% group_by(doc_id) %>% summarise(count = n())
View(data_compositions)
View(data_compositions)
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n())
?n
?nrow
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = nrow())
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = nrow(.))
View(data_compositions_check)
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n())
rlang::last_error()
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judges))
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
View(data_compositions_check)
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check)
typeof(data_compositions_check$doc_id)
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge)) %>% as.character(.$doc_id)
# Data check
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
data_compositions_check$doc_id <- data_compositions_check$doc_id %>% as.character()
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check)
View(data_compositions_check)
unique(data_compositions_check$count)
?case_when
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
data_compositions_check$doc_id <- data_compositions_check$doc_id %>% as.character()
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check) %>% case_when(
count = NA ~ 0
)
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check) %>% case_when(
.$count = NA ~ 0
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
data_compositions_check$doc_id <- data_compositions_check$doc_id %>% as.character()
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check) %>% case_when(
.$count = NA ~ 0
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
data_compositions_check$doc_id <- data_compositions_check$doc_id %>% as.character()
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check) %>% case_when(
.$count == NA ~ 0
)
data_compositions_check$count <- case_when(
data_compositions_check$count == NA ~ 0
)
unique(data_compositions_check$count)
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
data_compositions_check$doc_id <- data_compositions_check$doc_id %>% as.character()
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check)
data_compositions_check <- data_compositions %>% select(doc_id, judge) %>% group_by(doc_id) %>% summarise(count = n(judge))
data_compositions_check$doc_id <- data_compositions_check$doc_id %>% as.character()
data_compositions_check <- data_metadata %>% select(doc_id, formation) %>% left_join(., data_compositions_check) %>% mutate_all(~replace(., is.na(.), 0))
unique(data_compositions_check$count)
View(data_compositions_check)
# Visualization
ggplot(data = data_compositions, mapping = aes(x = count)) +
geom_bar(position = "dodge")
# Visualization
ggplot(data = data_compositions_check, mapping = aes(x = count)) +
geom_bar(position = "dodge")
sample <- list()
sample$four <- data_compositions_check %>% filter(count == 4) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
sample$one <- data_compositions_check %>% filter(count == 1) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
sample$five <- data_compositions_check %>% filter(count == 5) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
sample$zero <- data_compositions_check %>% filter(count == 0) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
View(sample)
sample <- data.frame()
sample$four <- data_compositions_check %>% filter(count == 4) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
View(sample)
sample <- list()
sample$four <- data_compositions_check %>% filter(count == 4) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
sample$one <- data_compositions_check %>% filter(count == 1) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
sample$five <- data_compositions_check %>% filter(count == 5) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
sample$zero <- data_compositions_check %>% filter(count == 0) %>% slice_sample(n = 10) %>% left_join(., data_texts, by = "doc_id")
View(sample)
sample$zero$text
sample[["five"]][["text"]]
